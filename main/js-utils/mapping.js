const x2factory = mapping => {
  return string => {
    return Object.keys( mapping )
      .reduce( ( result, key ) => {
        return result.replaceAll( key, mapping[ key ] )
      },
      string )
  }
}

export const mapping = {
  // match longest strings first
  // four-character matchers
  'G\\_<': 'ʛ',
  'J\\_<': 'ʄ',
  '|\\|\\': 'ǁ',
  '_B_L': ' ᷅',
  '_H_T': ' ᷄',
  '_R_F': ' ᷈',
  // three-character matchers
  'b_<': 'ɓ',
  'd_<': 'ɗ',
  'g_<': 'ɠ',
  'r\\`': 'ɻ',
  '_?\\': 'ˤ',
  '<F>': '↘',
  '<R>': '↗',
  // two-character matchers
  'd`': 'ɖ',
  'h\\': 'ɦ',
  'j\\': 'ʝ',
  'l\\': 'ɺ',
  'p\\': 'ɸ',
  'l`': 'ɭ',
  'n`': 'ɳ',
  'r`': 'ɽ',
  'r\\': 'ɹ',
  's\\': 'ɕ',
  's`': 'ʂ',
  't`': 'ʈ',
  'v\\': 'ʋ',
  'x\\': 'ɧ',
  'z\\': 'ʑ',
  'z`': 'ʐ',
  'B\\': 'ʙ',
  'G\\': 'ɢ',
  'H\\': 'ʜ',
  'I\\': 'ᵻ',
  'J\\': 'ɟ',
  'K\\': 'ɮ',
  'L\\': 'ʟ',
  'M\\': 'ɰ',
  'N\\': 'ɴ',
  'O\\': 'ʘ',
  'R\\': 'ʀ',
  'U\\': 'ᵿ',
  'X\\': 'ħ',
  ':\\': 'ˑ',
  '@\\': 'ɘ',
  '3\\': 'ɞ',
  '?\\': 'ʕ',
  '<\\': 'ʢ',
  '>\\': 'ʡ',
  '!\\': 'ǃ',
  '|\\': 'ǀ',
  '=\\': 'ǂ',
  '-\\': '‿',
  '||': '‖',
  '_j': 'ʲ',
  '_"': ' ̈',
  '_+': ' ̟',
  '_-': ' ̠',
  '_/': ' ̌',
  '_0': ' ̥',
  '_=': ' ̩',
  '_>': 'ʼ',
  '_\\': ' ̂',
  '_^': ' ̯',
  '_}': ' ̚',
  '_~': ' ̃',
  '_A': ' ̘',
  '_a': ' ̺',
  '_B': ' ̏',
  '_c': ' ̜',
  '_d': ' ̪',
  '_e': ' ̴',
  '_F': ' ̂',
  '_G': 'ˠ',
  '_H': ' ́',
  '_h': 'ʰ',
  '_k': ' ̰',
  '_L': ' ̀',
  '_l': 'ˡ',
  '_M': ' ̄',
  '_m': ' ̻',
  '_N': ' ̼',
  '_n': 'ⁿ',
  '_O': ' ̹',
  '_o': ' ̞',
  '_q': ' ̙',
  '_R': ' ̌',
  '_r': ' ̝',
  '_T': ' ̋',
  '_t': ' ̤',
  '_v': ' ̬',
  '_w': 'ʷ',
  '_X': ' ̆',
  '_x': ' ̽',
  '@`': 'ɚ',
  // one-character matchers
  'a': 'a',
  'b': 'b',
  'c': 'c',
  'd': 'd',
  'e': 'e',
  'f': 'f',
  'g': 'ɡ',
  'h': 'h',
  'i': 'i',
  'j': 'j',
  'k': 'k',
  'l': 'l',
  'm': 'm',
  'n': 'n',
  'o': 'o',
  'p': 'p',
  'q': 'q',
  'r': 'r',
  's': 's',
  't': 't',
  'u': 'u',
  'v': 'v',
  'P': 'ʋ',
  'w': 'w',
  'x': 'x',
  'y': 'y',
  'z': 'z',
  'A': 'ɑ',
  'B': 'β',
  'C': 'ç',
  'D': 'ð',
  'E': 'ɛ',
  'F': 'ɱ',
  'G': 'ɣ',
  'H': 'ɥ',
  'I': 'ɪ',
  'J': 'ɲ',
  'K': 'ɬ',
  'L': 'ʎ',
  'M': 'ɯ',
  'N': 'ŋ',
  'O': 'ɔ',
  'Q': 'ɒ',
  'R': 'ʁ',
  'S': 'ʃ',
  'T': 'θ',
  'U': 'ʊ',
  'V': 'ʌ',
  'W': 'ʍ',
  'X': 'χ',
  'Y': 'ʏ',
  'Z': 'ʒ',
  '.': '.',
  '"': 'ˈ',
  '%': 'ˌ',
  '\'': 'ʲ',
  ':': 'ː',
  '-': '​', // zero-width space
  '@': 'ə',
  '{': 'æ',
  '}': 'ʉ',
  '1': 'ɨ',
  '2': 'ø',
  '3': 'ɜ',
  '4': 'ɾ',
  '5': 'ɫ',
  '6': 'ɐ',
  '7': 'ɤ',
  '8': 'ɵ',
  '9': 'œ',
  '&': 'ɶ',
  '?': 'ʔ',
  '^': 'ꜛ',
  '!': 'ꜜ',
  '|': '|',
  '=': ' ̩',
  '`': '˞',
  '~': ' ̃',
  '_': ' ͡',
}

// The following X-SAMPA keys are alternatives to other available keys.
// We won't produce them when going from IPA to X-SAMPA.
const stoplist = [ 'v\\', '_j', '_/', '_=', '_\\', '_~' ]

export const xsampaIpaMap = Object.keys( mapping )
  .reduce(( result, key ) => {
    result[ key ] = mapping[ key ].trim()
    return result
  }, {})

export const ipaXsampaMap = Object.keys( mapping )
  .reduce(( result, key ) => {
    if ( !stoplist.includes( key ) ) {
      result[ mapping[ key ].trim() ] = key
    }
    return result
  }, {})

export const xsampa2ipa = x2factory( xsampaIpaMap )
export const ipa2xsampa = x2factory( ipaXsampaMap )
